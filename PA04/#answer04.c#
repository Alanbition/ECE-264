#include <stdio.h>
#include <stdlib.h>
#include "answer04.h"

storenode *firstcall(FILE *fptr)
{
  int ch=0;
  int i;
  int j = 0;
  long int count;

  ////I put the frequency(num), characters(chr),and total size(total) into a struct called storenode
  storenode *get = malloc(sizeof(storenode));
  if(get == NULL){return NULL;}

  long int *getnum = malloc(sizeof(long int) * 256);
  get -> num = getnum;
  if(getnum == NULL){return NULL;}

  int *getchr = malloc(sizeof(int) * 256);
  get -> chr = getchr;
  if(getchr == NULL){return NULL;}

  int *gettotal = malloc(sizeof(int));
  if(gettotal == NULL){return NULL;}
  get -> total = gettotal;

  if( fptr == NULL){return NULL;}
 
  ////I count the freq which is not 0
  for(i=0;i < 256;i++)
  {
    fseek(fptr, 0, SEEK_SET);
	count = 0;
    while((ch = fgetc(fptr)) !=EOF)
    {cc
	  
      if((ch == i)) 
      {
	    count++;
	  }
	}
	//fprintf(fptr2, "%ld\n",count);
    //printf("%ld\n",count);
	//Put count into linked list
    if(count > 0)
	{
	   
	  getnum[j] = count;
	  getchr[j] = i;

	  j++;
	  *(get -> total) = j;
      //printf("_____num=%ld, chr=%c, total=%d\n",get->num[j-1],get->chr[j-1],*(get->total));
      //printf("+++++realnum=%ld,chr=%c,total=%d\n",count,i,j);
	 }
	}
 return get;
 }
 
//
  ////This is the function call PQ_enq from the last assignment and create the link list in order and output them in a file
  void secondcall(realnode **head, storenode *list)
{
   int i;
   realnode *sameashead = *head;
   for (i = 0; i < *(list->total); i++)
  {
   tnode * new_tree = malloc(sizeof(tnode));
   if(new_tree == NULL){
     return;
   }
   new_tree -> left = NULL;
   new_tree -> right = NULL;
   new_tree -> tnum = list->num[i];
   new_tree -> tchr = list->chr[i];

   PQ_enq(&sameashead,new_tree);
 }
  
  //realnode *newnode = sameashead;
  
  *head = sameashead;
 /* while (newnode != NULL)
   {
     fprintf(fptr3, "%c:%ld->",((newnode->callt)->tchr),((newnode->callt)->tnum));
     newnode = newnode->next;
   }
  fprintf(fptr3, "%s","NULL");
 */
}



 ////This is the enqueue function from last assignment, I just changed the compare function and constructe the tnode here.
 realnode *PQ_enq(realnode **head, tnode *new_tree)
 {
/* remove the first lnode in a priority queue (PQ) implemented as a      */
/* linked list                                                           */

   ////Below this line is the same as the last assignment(except for the compare function) 
   realnode * new_node = malloc(sizeof(realnode));
   if(new_node == NULL)
   {
    return NULL;
   }
   new_node -> next = NULL;
   new_node -> callt = new_tree;


   if(new_tree == NULL)
   {
    return NULL;
   }

   // case 1: empty list to begin with

   if (*head == NULL) {
      *head = new_node;
      return new_node;
   }

   // case 2: non-empty list

   realnode *prev = NULL;
   realnode *curr = *head;
   while (curr != NULL) {
	//printf("realnum=%ld, realchr=%c, list=%ld,listchr=%c\n",((curr->callt)->tnum),((curr->callt)->tchr),(list->num[i]),(list->chr[i]));
	  if (((curr->callt)->tnum) - ((new_tree->tnum)) > 0){
         break;
      }
	  else {
         prev = curr;
         curr = curr->next;
      }
   }
   new_node->next = curr;
   if (prev != NULL) {
      prev->next = new_node;
   } else {
      *head = new_node;
   }
   return new_node;
}

////Merge two tree node together return a new node
tnode * tree_merge(realnode * tn1, realnode * tn2)
{
  
  tnode * tn = malloc(sizeof(tnode));
  if(tn == NULL){ return NULL;}
  tn -> left = tn1->callt;
  tn -> right = tn2->callt;
  tn -> tnum = (tn1 -> callt -> tnum) + (tn2 ->callt-> tnum);
  return tn;
}
  



///The last call merge the tree, enq the tree , print the tree and destroy the tree

void lastcall(realnode **head, FILE *fptr1, FILE *fptr2, FILE *fptr3)
{

   realnode *newhead = *head;
   char putarray[256];
 //  realnode *replacehead = *head;
   if(fptr1 == NULL){
    return;
   }
   //printf("%c",(replacehead->callt)->tchr);
 //  put_tree(newhead);

 // realnode *sorthead = NULL;
  while(newhead->next != NULL){
 // printf("fristout= %c:%ld\n",(newhead->callt->tchr),(newhead->callt->tnum));
  realnode *oldhead1 = stack_pop(&newhead);
//  printf("secondout=%c:%ld\n",(newhead->callt->tchr),(newhead->callt->tnum));
  realnode *oldhead2 = stack_pop(&newhead);
 // printf("now=%c:%ld\n",(newhead->callt->tchr),(newhead->callt->tnum));
  tnode * new_node = tree_merge(oldhead1, oldhead2);
 // printf("together=%c:%ld\n",(newhead->callt->tchr),(newhead->callt->tnum)); 
  PQ_enq(&newhead,new_node);
 // printf("last=%c;%ld\n",(newhead->callt->tchr),(newhead->callt)->tnum);
  free(oldhead1);
  free(oldhead2);
 // printf("______next\n");
  }
  // printf("%ld",(newhead->callt)->tnum);


   fseek(fptr2, 0, SEEK_SET);
   encode_treenew(newhead->callt,fptr2);
   fseek(fptr1,0,SEEK_SET);
   encode_tree(newhead->callt,putarray,0,fptr1);
   encode_bitwise(fptr2, fptr3);
   destroy_tree(newhead->callt);
   link_destroy(newhead);
   return;
}



////Free store node

void free_all_store(storenode *list)
{
   free(list->chr);
   free(list->num);
   free(list->total);
   free(list);
}



////Free linknode and destroy the tree inside it
void link_destroy(realnode *list)
{
	while(list != NULL)
	{
    realnode *cur = list->next;
//	destroy_tree(list->callt);
//	free(list->callt);
	free(list);
	list = cur;
    }
  return;
}




////Free the tree
void destroy_tree(tnode *head)
{
   if(head == NULL){
   return;
   }
   destroy_tree(head->left);
   destroy_tree(head->right);
   free(head);
}

////Same pop function from last assignment, return the popped node
 realnode *stack_pop(realnode **head)
{
   if(*head == NULL)
   {
     return NULL;
   }
   realnode *list3 = *head;
   *head = list3->next;
   list3->next = NULL;

   return list3;
}

/*
////Using the while loop to put all the linked node(realnode) to a tree
void put_tree(realnode **head)
{
  realnode *headnow = *head;
  //printf("%c",headnow->callt->tchr);
  realnode *sorthead = NULL;
  while(headnow->next != NULL){
  realnode *oldhead1 = stack_pop(&headnow);
  realnode *oldhead2 = stack_pop(&headnow);
 
  tnode * new_node = tree_merge(oldhead1->callt, oldhead2->callt);
   
  PQ_enq(&sorthead,new_node);
  free(oldhead1);
  free(oldhead2);
  //realnode *oldhead;
  //oldhead = stack_pop(&headnow);
  //link_destroy(oldhead, destroy_fn);  
  //oldhead = stack_pop(&headnow);
  //link_destroy(oldhead, destroy_fn);
  }
  return;
}
*/
////Using recursion to print the tree into the file
void encode_tree(tnode *tree,char path[], int index, FILE *fptr1)
{
  if(tree == NULL){
  return;
  }
  if((tree->left == NULL) &&(tree->right ==NULL))
  {
    fseek(fptr1, 0, SEEK_END);
	//fprintf(fptr4,"%c:",tree->tchr);
	fputc(tree->tchr, fptr1);
	fputc(':', fptr1);
	int i;
	for(i = 0;i<index; i++)
	{
	   if(path[i] == '0' || path[i] =='1');
	   {
	     fputc(path[i],fptr1);
	   }
	}
	fputc('\n',fptr1);
	return;
   }
   path[index] = '0';
   encode_tree(tree->left, path, index+1, fptr1);
   path[index] = '1';
   encode_tree(tree->right, path, index+1, fptr1);
}



void encode_treenew(tnode *tnew, FILE *fptr2)
{
  if(tnew == NULL){
  return;
  }
  if((tnew->left == NULL) &&(tnew->right ==NULL))
  {
	fprintf(fptr2,"1");
	fputc(tnew->tchr, fptr2);
	return;
   }
   encode_treenew(tnew->left, fptr2);
   encode_treenew(tnew->right, fptr2);
   fprintf(fptr2,"0");
}


void encode_bitwise(FILE *fptr2, FILE *fptr3)
{
  unsigned char temp;
  fseek(fptr2,0,SEEK_END);
  int num1;
  int num2;

  num1 = ftell(fptr2);
  
  num2 = num1 * 8;
  int i = 0;;
  unsigned char ch;
  unsigned char gotyou;
  unsigned char nextAdd = 0b00000000;
  unsigned char control = 0b11111111;
  unsigned char nextAdd2;
  int index = 0;


 // printf("%d",i);
  fseek(fptr2, 0, SEEK_SET);
 for(i = 0; i < num1; i++)
//   while(ch != EOF)
  {
    temp = fgetc(fptr2);
	if(temp == '1') { 
	  index++;
	  ch = fgetc(fptr2);
	 // nextAdd = (ch<<(8-index)) & control;
	  nextAdd2 = (0b10000000>>(index-1)) & control; 
      gotyou = ((ch>>index) | nextAdd2 | nextAdd) & control; 
      nextAdd = (ch<<(8-index)) & control;

	  fprintf(fptr3,"%c", gotyou);
	  if(index == 8)
	  {
	   index =0;
	   fprintf(fptr3,"%c",nextAdd);
	   nextAdd = (nextAdd<<8)&control;
	  }
	}
	else if(temp == '0')
	{
     // ch = fgetc(fptr2);
      index++;
	  if(index == 8)
	  {
	   index =0;
	   fprintf(fptr3,"%c",nextAdd);
	   nextAdd = (nextAdd<<8)&control;
	  }
	}

 }
   if(index> 0)
   {
      fprintf(fptr3, "%c",nextAdd);
 
}
}

   




 
